using MediatR;
using Microsoft.Extensions.Logging;
using YemenBooking.Application.Queries.MobileApp.General;
using YemenBooking.Application.DTOs;
using YemenBooking.Core.Interfaces.Repositories;

namespace YemenBooking.Application.Handlers.Queries.MobileApp.General;

/// <summary>
/// ูุนุงูุฌ ุงุณุชุนูุงู ุงูุญุตูู ุนูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ
/// Handler for get FAQs query
/// </summary>
public class GetFAQsQueryHandler : IRequestHandler<GetFAQsQuery, ResultDto<List<FAQCategoryDto>>>
{
    private readonly IFAQRepository _faqRepository;
    private readonly ILogger<GetFAQsQueryHandler> _logger;

    /// <summary>
    /// ููุดุฆ ูุนุงูุฌ ุงุณุชุนูุงู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ
    /// Constructor for get FAQs query handler
    /// </summary>
    /// <param name="faqRepository">ูุณุชูุฏุน ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ</param>
    /// <param name="logger">ูุณุฌู ุงูุฃุญุฏุงุซ</param>
    public GetFAQsQueryHandler(
        IFAQRepository faqRepository,
        ILogger<GetFAQsQueryHandler> logger)
    {
        _faqRepository = faqRepository;
        _logger = logger;
    }

    /// <summary>
    /// ูุนุงูุฌุฉ ุงุณุชุนูุงู ุงูุญุตูู ุนูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ
    /// Handle get FAQs query
    /// </summary>
    /// <param name="request">ุทูุจ ุงูุงุณุชุนูุงู</param>
    /// <param name="cancellationToken">ุฑูุฒ ุงูุฅูุบุงุก</param>
    /// <returns>ูุงุฆูุฉ ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ ูุฌูุนุฉ ุญุณุจ ุงููุฆุงุช</returns>
    public async Task<ResultDto<List<FAQCategoryDto>>> Handle(GetFAQsQuery request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("ุจุฏุก ุงุณุชุนูุงู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ. ุงููุบุฉ: {Language}, ุงููุฆุฉ: {Category}", 
                request.Language, request.Category ?? "ุฌููุน ุงููุฆุงุช");

            // ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช ุงููุฏุฎูุฉ
            var validationResult = ValidateRequest(request);
            if (!validationResult.IsSuccess)
            {
                return validationResult;
            }

            // ุชุทุจูุน ุงููุบุฉ
            var language = NormalizeLanguage(request.Language);

            // ุงูุญุตูู ุนูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ
            var faqs = string.IsNullOrWhiteSpace(request.Category)
                ? await _faqRepository.GetAllActiveAsync(language, cancellationToken)
                : await _faqRepository.GetByCategoryAsync(request.Category, language, cancellationToken);

            if (faqs == null || !faqs.Any())
            {
                _logger.LogInformation("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃุณุฆูุฉ ุดุงุฆุนุฉ ูููุฆุฉ: {Category}", request.Category ?? "ุฌููุน ุงููุฆุงุช");
                
                return ResultDto<List<FAQCategoryDto>>.Ok(
                    new List<FAQCategoryDto>(), 
                    "ูุง ุชูุฌุฏ ุฃุณุฆูุฉ ุดุงุฆุนุฉ ูุชุงุญุฉ ุญุงููุงู"
                );
            }

            // ุชุฌููุน ุงูุฃุณุฆูุฉ ุญุณุจ ุงููุฆุงุช
            var categorizedFAQs = GroupFAQsByCategory(faqs);

            // ุชุฑุชูุจ ุงููุฆุงุช ูุงูุฃุณุฆูุฉ
            var sortedCategories = categorizedFAQs
                .OrderBy(c => GetCategoryDisplayOrder(c.CategoryName))
                .ThenBy(c => c.CategoryName)
                .ToList();

            foreach (var category in sortedCategories)
            {
                category.Questions = category.Questions
                    .OrderBy(q => q.DisplayOrder)
                    .ThenBy(q => q.Question)
                    .ToList();
            }

            _logger.LogInformation("ุชู ุงูุญุตูู ุนูู {CategoriesCount} ูุฆุฉ ุชุญุชูู ุนูู {QuestionsCount} ุณุคุงู ุดุงุฆุน", 
                sortedCategories.Count, sortedCategories.Sum(c => c.Questions.Count));

            return ResultDto<List<FAQCategoryDto>>.Ok(
                sortedCategories, 
                $"ุชู ุงูุญุตูู ุนูู {sortedCategories.Sum(c => c.Questions.Count)} ุณุคุงู ุดุงุฆุน ูู {sortedCategories.Count} ูุฆุฉ"
            );
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "ุฎุทุฃ ุฃุซูุงุก ุงูุญุตูู ุนูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ. ุงููุบุฉ: {Language}", request.Language);
            return ResultDto<List<FAQCategoryDto>>.Failed(
                $"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุญุตูู ุนูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ: {ex.Message}", 
                "GET_FAQS_ERROR"
            );
        }
    }

    /// <summary>
    /// ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช ุงููุฏุฎูุฉ
    /// Validate request data
    /// </summary>
    /// <param name="request">ุทูุจ ุงูุงุณุชุนูุงู</param>
    /// <returns>ูุชูุฌุฉ ุงูุชุญูู</returns>
    private ResultDto<List<FAQCategoryDto>> ValidateRequest(GetFAQsQuery request)
    {
        if (string.IsNullOrWhiteSpace(request.Language))
        {
            _logger.LogWarning("ุงููุบุฉ ูุทููุจุฉ");
            return ResultDto<List<FAQCategoryDto>>.Failed("ุงููุบุฉ ูุทููุจุฉ", "LANGUAGE_REQUIRED");
        }

        // ุงูุชุญูู ูู ุฏุนู ุงููุบุฉ
        var supportedLanguages = new[] { "ar", "en", "arabic", "english" };
        var normalizedLanguage = NormalizeLanguage(request.Language);
        
        if (!supportedLanguages.Contains(normalizedLanguage.ToLower()))
        {
            _logger.LogWarning("ุงููุบุฉ ุบูุฑ ูุฏุนููุฉ: {Language}", request.Language);
            return ResultDto<List<FAQCategoryDto>>.Failed("ุงููุบุฉ ุบูุฑ ูุฏุนููุฉ", "UNSUPPORTED_LANGUAGE");
        }

        return ResultDto<List<FAQCategoryDto>>.Ok(null, "ุงูุจูุงูุงุช ุตุญูุญุฉ");
    }

    /// <summary>
    /// ุชุทุจูุน ุงููุบุฉ
    /// Normalize language
    /// </summary>
    /// <param name="language">ุงููุบุฉ</param>
    /// <returns>ุงููุบุฉ ุงููุทุจุนุฉ</returns>
    private string NormalizeLanguage(string language)
    {
        return language.ToLower().Trim() switch
        {
            "ar" or "arabic" or "ุนุฑุจู" => "ar",
            "en" or "english" or "ุฅูุฌููุฒู" => "en",
            _ => "ar" // ุงูุชุฑุงุถู ุงูุนุฑุจูุฉ
        };
    }

    /// <summary>
    /// ุชุฌููุน ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ ุญุณุจ ุงููุฆุงุช
    /// Group FAQs by categories
    /// </summary>
    /// <param name="faqs">ูุงุฆูุฉ ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ</param>
    /// <returns>ูุงุฆูุฉ ุงููุฆุงุช ูุน ุฃุณุฆูุชูุง</returns>
    private List<FAQCategoryDto> GroupFAQsByCategory(IEnumerable<Core.Entities.FAQ> faqs)
    {
        var groupedFAQs = faqs
            .GroupBy(f => f.Category ?? "ุนุงู")
            .Select(group => new FAQCategoryDto
            {
                CategoryName = group.Key,
                CategoryIcon = GetCategoryIcon(group.Key),
                Questions = group.Select(faq => new FAQItemDto
                {
                    Id = faq.Id,
                    Question = faq.Question ?? string.Empty,
                    Answer = faq.Answer ?? string.Empty,
                    DisplayOrder = faq.DisplayOrder,
                    HelpfulCount = faq.HelpfulCount,
                    NotHelpfulCount = faq.NotHelpfulCount
                }).ToList()
            })
            .ToList();

        return groupedFAQs;
    }

    /// <summary>
    /// ุงูุญุตูู ุนูู ุฃููููุฉ ุงููุฆุฉ
    /// Get category icon
    /// </summary>
    /// <param name="categoryName">ุงุณู ุงููุฆุฉ</param>
    /// <returns>ุฃููููุฉ ุงููุฆุฉ</returns>
    private string? GetCategoryIcon(string categoryName)
    {
        return categoryName.ToLower() switch
        {
            "ุญุฌูุฒุงุช" or "booking" => "๐",
            "ุฏูุน" or "payment" => "๐ณ",
            "ุญุณุงุจ" or "account" => "๐ค",
            "ุนุงู" or "general" => "โ",
            "ุชููู" or "technical" => "๐ง",
            "ุณูุงุณุงุช" or "policies" => "๐",
            "ุฎุฏูุฉ ุงูุนููุงุก" or "support" => "๐ง",
            "ุนูุงุฑุงุช" or "properties" => "๐จ",
            _ => "โ"
        };
    }

    /// <summary>
    /// ุงูุญุตูู ุนูู ุชุฑุชูุจ ุนุฑุถ ุงููุฆุฉ
    /// Get category display order
    /// </summary>
    /// <param name="categoryName">ุงุณู ุงููุฆุฉ</param>
    /// <returns>ุชุฑุชูุจ ุงูุนุฑุถ</returns>
    private int GetCategoryDisplayOrder(string categoryName)
    {
        return categoryName.ToLower() switch
        {
            "ุนุงู" or "general" => 1,
            "ุญุฌูุฒุงุช" or "booking" => 2,
            "ุนูุงุฑุงุช" or "properties" => 3,
            "ุฏูุน" or "payment" => 4,
            "ุญุณุงุจ" or "account" => 5,
            "ุณูุงุณุงุช" or "policies" => 6,
            "ุชููู" or "technical" => 7,
            "ุฎุฏูุฉ ุงูุนููุงุก" or "support" => 8,
            _ => 999
        };
    }
}
